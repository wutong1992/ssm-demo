<?xml version="1.0" encoding="utf-8" ?>
<configuration scan="true" scanPeriod="60 second" debug="false">
    <!-- 负责写日志,控制台日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

<!--    &lt;!&ndash; 文件日志 &ndash;&gt;-->
<!--    <appender name="ERROR" class="ch.qos.logback.core.FileAppender">-->
<!--        <file>logs/error.log</file>-->
<!--        <append>true</append>-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            &lt;!&ndash; LevelFilter: 级别过滤器，根据日志级别进行过滤 &ndash;&gt;-->
<!--            <level>ERROR</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--        <encoder>-->
<!--            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 每天生成一个日志文件，保存30天的日志文件-->
<!--    - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。-->
<!--    &ndash;&gt;-->
<!--    <appender name="FILE1" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>logs/logFileByTime.%d{yyyy-MM-dd}.log</fileNamePattern>-->
<!--            <maxHistory>30</maxHistory>-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。-->
<!--    -    窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。-->
<!--    -    可以指定文件压缩选项-->
<!--    &ndash;&gt;-->
<!--    <appender name="FILE2" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <file>logs/logFileByWindow.log</file>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
<!--            <fileNamePattern>logs/logFileByWindow.%i.log.zip</fileNamePattern>-->
<!--            <minIndex>1</minIndex>-->
<!--            <maxIndex>3</maxIndex>-->
<!--        </rollingPolicy>-->
<!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
<!--            <maxFileSize>5MB</maxFileSize>-->
<!--        </triggeringPolicy>-->
<!--        <encoder>-->
<!--            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

    <logger name="com.zhu.demo" />

<!--    <logger name="com.example.demo1.MyTest" level="INFO" additivity="false">-->
<!--        <appender-ref ref="STDOUT"/>-->
<!--        <appender-ref ref="ERROR"/>-->
<!--        <appender-ref ref="FILE1" />-->
<!--        <appender-ref ref="FILE2" />-->
<!--    </logger>-->

    <root level="INFO">
        <appender-ref ref="STDOUT"/>
<!--        <appender-ref ref="ERROR"/>-->
    </root>
</configuration>